@page "/"
@using BlazorApp1.Models;
@using BlazorApp1.Services;
@inject IConfiguration Configuration

<PageTitle>Index</PageTitle>

@if (userOrders != null)
{
    <div class="orders-container">
        <h2>User Orders:</h2>
        <ul class="order-list">
            @foreach (var order in userOrders)
            {
                <li class="order-item">
                    <div class="order-details">
                        <h3 class="order-name">@order.ordername</h3>
                        <p class="order-description">@order.orderdetails</p>
                    </div>
                </li>
            }
        </ul>
    </div>
}

<button class="create-button" @onclick="CreateOrderForm">Create Order</button>

@if (showCreateForm)
{
    <div class="create-form">
        <h2>Create Order:</h2>
        <form>
            <div class="form-group">
                <label for="order-name">Order Name:</label>
                <input type="text" class="form-control" id="order-name" @bind="newOrderName" />
            </div>
            <div class="form-group">
                <label for="order-details">Order Details:</label>
                <input type="text" class="form-control" id="order-details" @bind="newOrderDetails" />
            </div>
            <div class="button-group">
                <button class="submit-button" @onclick="CreateOrder">Submit</button>
                <button class="cancel-button" @onclick="CancelCreateOrder">Cancel</button>
            </div>
        </form>
    </div>
}

<style>
    .orders-container {
        margin-bottom: 20px;
    }

        .orders-container h2 {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .order-list {
        list-style-type: none;
        padding: 0;
    }

    .order-item {
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        background-color: #f5f5f5;
    }

    .order-details {
        margin-left: 20px;
    }

    .order-name {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .order-description {
        font-size: 16px;
        color: #555;
    }

    .create-button {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 18px;
        cursor: pointer;
    }

        .create-button:hover {
            background-color: #0056b3;
        }

    .create-form {
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            font-size: 18px;
            font-weight: bold;
            display: block;
        }

    .form-control {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        width: 100%;
    }

    .button-group {
        margin-top: 15px;
    }

    .submit-button {
        background-color: #28a745;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 18px;
        cursor: pointer;
        margin-right: 10px;
    }

    .submit-button:hover {
        background-color: #1e7e34;
    }

    .cancel-button {
        background-color: #dc3545;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
    }
    </style>

@code {
    private OrderServices orderServices;
    private List<Orders> userOrders;
    private bool showCreateForm = false;
    private string newOrderName = "";
    private string newOrderDetails = "";

    protected override async Task OnInitializedAsync()
    {
        orderServices = new OrderServices(new DbService(Configuration));
        userOrders = await orderServices.GetOrders();
    }

    private void CreateOrderForm()
    {
        showCreateForm = true;
    }

    private async Task CreateOrder()
    {
        Orders newOrder = new Orders
            {
                ordername = newOrderName,
                orderdetails = newOrderDetails
            };

        bool created = await orderServices.CreateOrder(newOrder);

        if (created)
        {
            // Refresh the userOrders list
            userOrders = await orderServices.GetOrders();
            showCreateForm = false;
            newOrderName = "";
            newOrderDetails = "";
        }
        else
        {
            // Handle error if creation fails
        }
    }

    private void CancelCreateOrder()
    {
        showCreateForm = false;
        newOrderName = "";
        newOrderDetails = "";
    }
}
